@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix)
    {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    /* Global includes for the theme
    ***************************************************************/

    SetMeta("X-UA-Compatible", "IE=edge,chrome=1");
Script.Require("jQuery");
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript" charset="utf-8"></script>
    Script.Include("jquery.uniform.js"); 
    <script type="text/javascript" charset="utf-8">
        $(function () {
            $("input, textarea, select, button").uniform();
        });
    </script>
        

    Style.Include("uniform/uniform.default.css");
    Style.Include("infusion-module.css");    
    Style.Include("bootstrap.css");

    /* Store each page in a variable for conditionals
    ***************************************************************/

    var currentUrl = Request.Url.AbsoluteUri;
    var isOrigin = HttpContext.Current.Request.Url.AbsolutePath.EndsWith("/");
    
    
    if(isOrigin){
    Style.Include("home-site.css");
    } else {
    Style.Include("site.css");
    }
    <link rel="apple-touch-icon" href="../Content/Images/apple-touch-icon.png" />
    <link rel="apple-touch-icon" sizes="72x72" href="../Content/Images/apple-touch-icon-72x72.png" />
    <link rel="apple-touch-icon" sizes="114x114" href="../Content/Images/apple-touch-icon-114x114.png" />
    
    Script.Include("bootstrap.min.js");

    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new[] { "TripelFirst", "TripelSecond", "TripelThird" }, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass))
    {
        Model.Classes.Add(tripelClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new[] { "FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth" }, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass))
    {
        Model.Classes.Add(footerQuadClass);
    }

    /* Get image path for images
    ***************************************************************/
    var ImgPath = Url.Content("~/Themes/Infusion/Content/Images/");

    /* Inserting some ad hoc shapes
    ***************************************************************/

    WorkContext.Layout.Header.Add(New.Branding(), "1"); // Site name and link to the home page
    WorkContext.Layout.Footer.Add(New.Copyright(), "5"); // Copyright message
    //WorkContext.Layout.Header.Add(New.User(), "8"); // Login and dashboard links
    if (isOrigin)
    {
        WorkContext.Layout.AfterMain.Add(New.Search(), "9"); //Search box for Body	
    }
    else
    {
        WorkContext.Layout.Header.Add(New.Search(), "9"); // Search box for header
    }

    /* Last bit of code to prep the layout wrapper
    ***************************************************************/

    Model.Id = "layout-wrapper";
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model
    var mainDivClass = string.Empty; // creating a string variable to hold the class name to add if AsideFirst is not null
}
@tag.StartElement


<div id="layout-main" class="container body-shadows">
    @if (Model.Header != null)
    { 
        <div class="header-powered"><img src="@(ImgPath + "ItsOnMessage.png")"></div>
        <div id="layout-header" class="navbar">
            
            <div id="header" class="navbar-inner">
                <div class="container"><!-- change all container to container-fluid and row to row-fluid for fluid layout -->
                    <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </a>
                    @Zone(Model.Header)
<div class="nav-collapse">
    <ul class="nav pull-right">
        <li class="dropdown">
            @if (WorkContext.CurrentUser != null)
            {
                dynamic user = WorkContext.CurrentUser.ContentItem;
                List<string> roles = user.UserRolesPart.Roles;
        
                <a href="#" class="dropdown-toggle" data-toggle="dropdown">@WorkContext.CurrentUser.UserName<b class="caret"></b></a>
                <ul class="dropdown-menu">
                    @Display(Model.Navigation) <li>@Html.ActionLink(T("Change Password").ToString(), "ChangePassword", new { Controller = "Account", Area = "Orchard.Users" })</li>
                    <li>@Html.ActionLink(T("Sign Out").ToString(), "LogOff", new { Controller = "Account", Area = "Orchard.Users", ReturnUrl = Context.Request.RawUrl })</li>
                    @if (AuthorizedFor(Orchard.Security.StandardPermissions.AccessAdminPanel))
                    {
                        <li class="divider"></li>
                        <li>@Html.ActionLink(T("Dashboard").ToString(), "Index", new { Area = "Dashboard", Controller = "Admin" })</li>
                    }
                </ul>
            }
            else
            {
                @Html.ActionLink(T("Sign In").ToString(), "LogOn", new { Controller = "Account", Area = "Orchard.Users", ReturnUrl = (Request.QueryString["ReturnUrl"] ?? Request.RawUrl) })
            }
        </li>
    </ul>
</div>


                </div>
            </div>
        </div>
    }


    @if (isOrigin)
    {
        <div class="home-content-search">
            <div class="home-content-search-input">
                @Zone(Model.AfterMain)
            </div>
        </div>
    }
    <!-- Main hero unit for a primary marketing message or call to action -->
    @if (Model.Featured != null && !isOrigin)
    {
        <div id="layout-featured" class="hero-unit">
            @Zone(Model.Featured)
        </div><!--/.hero-unit -->
    }

    @if (Model.BeforeMain != null && !isOrigin)
    {
        <div id="layout-before-main">
            @Zone(Model.BeforeMain)
        </div><!--/div -->
    }
   

    <!-- Place messages above Content -->
    @if (Model.Messages != null)
    {
        <div id="messages" class="@mainDivClass">
            @Zone(Model.Messages)
        </div><!--/.span -->
    }
    @if (Model.BeforeContent != null && !isOrigin)
    {
        <div id="before-content" class="@mainDivClass">
            @Zone(Model.BeforeContent)
        </div><!--/.span -->
    }
    @if (Model.Content != null && !isOrigin)
    {
        <div id="content" class="span12">
            @Zone(Model.Content)
             
                
        </div><!--/.span -->
    }
    @if (Model.AfterContent != null && !isOrigin)
    {
        <div id="after-content" class="@mainDivClass">
            @Zone(Model.AfterContent)
        </div><!--/.span -->
    }
    @if (Model.AsideSecond != null && !isOrigin)
    {
        <div class="span3">
            <div id="aside-second" class="sidebar-nav">
                @Zone(Model.AsideSecond)
            </div><!--/.well -->
            <div id="aside-second" class="sidebar-nav">
                @Zone(Model.AsideFirst)
            </div><!--/.well -->
        </div><!--/.span -->
    }
    @if (Model.TripelFirst != null || Model.TripelSecond != null || Model.TripelThird != null)
    {
        <div id="layout-tripel" class="row">
            @if (Model.TripelFirst != null && !isOrigin)
            {
                <div id="tripel-first" class="span4">
                    @Zone(Model.TripelFirst)
                </div><!--/.span -->
            }
            @if (Model.TripelSecond != null && !isOrigin)
            {
                <div id="tripel-second" class="span4">
                    @Zone(Model.TripelSecond)
                </div><!--/.span -->
            }
            @if (Model.TripelThird != null && !isOrigin)
            {
                <div id="tripel-third" class="span4">
                    @Zone(Model.TripelThird)
                </div><!--/.span -->
            }
        </div><!--/.row -->
    }


    <footer id="footer">
        @if (Model.Footer != null)
        {
            <div id="footer-sig">
                @Zone(Model.Footer)
            </div>
        }
    </footer>
        </div><!--/.container -->

@tag.EndElement